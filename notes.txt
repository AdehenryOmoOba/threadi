*** Modification branch ***

- To create a new NextJS project with typescript using pnpm, create the project directory, open the prodect directory with vscode, open the terminal and run cammand:  "pnpm create next-app ./ --template typescript"
- Install postgres, drizzle and esbuid-register with commands:
   1. pnpm add drizzle-orm pg dotenv
   2. pnpm add drizzle-kit @types/pg esbuild esbuild-register -D
- To set up postgres database using docker:
- Install docker on your machine and start docker
- create a "docker-compose.yml" file in the root directory of your project and create the postgres db image which include "db" and "adminer" services
- Open a new terminal and run command "docker compose up"
- To use the drizzle ORM:
   1. create a "db" directory
   2. Define database schema in a schema.ts file inside the db directory
   3. Create a migrate.ts file, import "dotenv/config" and configure the file to generate a migration
   4. Push the migration to the physical database


*** CRUD operations with drizzle ***

- Create a global DB client
 1. Create a "dbClient.ts" file inside the "db" directory import "drizzle", "Client" and "* as schema" from "drizzle-orm/node-postgres", "pg" and "./schema.ts" respectively
 2. Instantiate the "Client" class and pass config object as argument with key "connectionString" and value set to database url connection string and call the "connect" method from the returned object.
 3. call the "drizzle" method, passing in the returned object from step 2 as frist argument and a config object as second argument with key "schema" and value "schema".
 
 

*** Database seeding ***

///////////////////////////////////////////

*** packages ***

- nextJS: ui framework
- nextauth: for auth
- uploadthing: for file uploads
- svix: for webhooks
- shadcn: ui components
- tailwindcss: styling
- dotenv: enviroment variables
- drizzle: orm
- pg: database

******** functionalities *************

Register:
  Credentials:
  - 
